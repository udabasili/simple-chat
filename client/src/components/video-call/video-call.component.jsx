import React, { Component, useRef } from 'react';
import Video from 'twilio-video';
import axios from 'axios';
import {connect} from "react-redux";
import {socket} from "../../services/socketIo";
import ReceiveCall from "./recieve-call";

class VideoComponent extends Component {
 
  state = {
    token:null,
    userBeingCalled:null,
    participants:[],
    room: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),
    identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
    previewTracks: null,
    localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
    hasJoinedRoom: false,
    activeRoom: null 
  }
    


    componentDidMount(){
        this.setState({
            userBeingCalled: this.props.user
        })
      // get the token based on the current user's username
      if(this.props.currentUser){
        let body ={ 
          room: this.state.room,
          identity: this.props.currentUser.username
        
        }


    //get token and join the room
      axios.post('/video-token', body).then(results => {
        let token = results.data.message.token
        this.setState({token: token, }, () =>{
                  this.joinRoom()
              });
          })
        }
      }
        
    joinRoom = () => {
        let connectOptions = { name: this.state.room};
        if (this.state.previewTracks) {
            connectOptions.tracks = this.state.previewTracks;
        }

        //connect the video and set the video and audio based on the user item
        // the participant is passed from the token based on the username submited
        //it contains lots of onformation
        Video.connect(this.state.token, connectOptions).then(this.roomJoined, error => {
            alert('Could not connect to Twilio: ' + error.message);
            
          });
        }

        leaveRoom = () =>{
            this.state.activeRoom.disconnect();
            this.props.closeHandler(false)
            this.setState({ hasJoinedRoom: false, localMediaAvailable: false });
        }
/**Get the audio and video from user and attach to div container with ref */
    attachTrack(track, container) {
        container.appendChild(track.attach());
        }
    
    attachParticipantTracks(participant, container) {
        var tracks = this.getTracks(participant)
        this.attachTracks(tracks, container);
    }

//get the track from from the participant map
    getTracks(participant) {
    return Array.from(participant.tracks.values()).filter(function (publication) {
        return publication.track;
    }).map(function (publication) {
        return publication.track;
    });
    }
//attach the tracks to the container
    attachTracks(tracks, container) {
        tracks.forEach((track)=> {
            this.attachTrack(track, container);
          });
        }

    
    roomJoined = (room) =>{
      console.log(`Successfully joined a Room: ${room}`);
        room.on('participantConnected', participant => {
          console.log(`A remote Participant connected: ${participant}`);
        })
    // Called when a participant joins a room
    console.log(this.props);
    if (this.props.incomingCalling !== true){
      let currentName = this.props.currentUser.username;
            let receive = this.state.userBeingCalled.username; 
                       
            socket.emit("voiceCall", { receive, currentName, room})
          this.setState({
            participants:room.localParticipant.identity,
            activeRoom: room,
            localMediaAvailable: true,
            hasJoinedRoom: true  
          });

    }
    
  
    // Attach LocalParticipant's tracks to the DOM, if not already attached.
    var previewContainer = this.refs.localMedia;
    if (!previewContainer.querySelector('video')) {
      this.attachParticipantTracks(room.localParticipant, previewContainer);
    }
}
      
    

      // Attach LocalParticipant's tracks to the DOM, if not already attached.
    handleLogout = () => {
      this.setState({
        token: null
      })
    }
  
 render() {
   const {token} = this.state
   let showLocalTrack = <div className="flex-item"><div ref="localMedia" /> </div>  
      
   return (
    <div className="app">
      <header>
        <h1>Video Chat with Hooks</h1>
      </header>
      <main>
      {
           showLocalTrack

      }
      { token &&
        <button label="Leave Room" onClick={() => this.leaveRoom()}  >Leave</button>

      }
      <div className="flex-item" ref="remoteMedia" id="remote-media" >
  </div>
      </main>
    </div>

       
   )
   }
}

const mapStateToProps = (state) =>({
    currentUser:state.user.currentUser,

  })
  
export default connect(mapStateToProps, null)(VideoComponent);